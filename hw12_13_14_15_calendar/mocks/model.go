// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	calendar "github.com/RomanSarvarov/otus_go_home_work/calendar"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Model is an autogenerated mock type for the Model type
type Model struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, e
func (_m *Model) CreateEvent(ctx context.Context, e *calendar.Event) (*calendar.Event, error) {
	ret := _m.Called(ctx, e)

	var r0 *calendar.Event
	if rf, ok := ret.Get(0).(func(context.Context, *calendar.Event) *calendar.Event); ok {
		r0 = rf(ctx, e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calendar.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *calendar.Event) error); ok {
		r1 = rf(ctx, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: ctx, id
func (_m *Model) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindEventByID provides a mock function with given fields: ctx, id
func (_m *Model) FindEventByID(ctx context.Context, id uuid.UUID) (*calendar.Event, error) {
	ret := _m.Called(ctx, id)

	var r0 *calendar.Event
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *calendar.Event); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calendar.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindEvents provides a mock function with given fields: ctx, filter
func (_m *Model) FindEvents(ctx context.Context, filter calendar.EventFilter) ([]*calendar.Event, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*calendar.Event
	if rf, ok := ret.Get(0).(func(context.Context, calendar.EventFilter) []*calendar.Event); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*calendar.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, calendar.EventFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, id, e
func (_m *Model) UpdateEvent(ctx context.Context, id uuid.UUID, e *calendar.Event) (*calendar.Event, error) {
	ret := _m.Called(ctx, id, e)

	var r0 *calendar.Event
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *calendar.Event) *calendar.Event); ok {
		r0 = rf(ctx, id, e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calendar.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *calendar.Event) error); ok {
		r1 = rf(ctx, id, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewModel interface {
	mock.TestingT
	Cleanup(func())
}

// NewModel creates a new instance of Model. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModel(t mockConstructorTestingTNewModel) *Model {
	mock := &Model{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
