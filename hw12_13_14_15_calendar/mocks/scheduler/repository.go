// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	calendar "github.com/RomanSarvarov/otus_go_home_work/calendar"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteEvent provides a mock function with given fields: ctx, ids
func (_m *Repository) DeleteEvent(ctx context.Context, ids ...uuid.UUID) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...uuid.UUID) error); ok {
		r0 = rf(ctx, ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindEvents provides a mock function with given fields: ctx, filter
func (_m *Repository) FindEvents(ctx context.Context, filter calendar.EventFilter) ([]*calendar.Event, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*calendar.Event
	if rf, ok := ret.Get(0).(func(context.Context, calendar.EventFilter) []*calendar.Event); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*calendar.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, calendar.EventFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
