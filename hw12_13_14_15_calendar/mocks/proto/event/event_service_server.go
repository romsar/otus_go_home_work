// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/RomanSarvarov/otus_go_home_work/calendar/proto/event"
	mock "github.com/stretchr/testify/mock"
)

// EventServiceServer is an autogenerated mock type for the EventServiceServer type
type EventServiceServer struct {
	mock.Mock
}

// CreateEventV1 provides a mock function with given fields: _a0, _a1
func (_m *EventServiceServer) CreateEventV1(_a0 context.Context, _a1 *event.CreateEventRequestV1) (*event.EventReplyV1, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *event.EventReplyV1
	if rf, ok := ret.Get(0).(func(context.Context, *event.CreateEventRequestV1) *event.EventReplyV1); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.EventReplyV1)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *event.CreateEventRequestV1) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventV1 provides a mock function with given fields: _a0, _a1
func (_m *EventServiceServer) DeleteEventV1(_a0 context.Context, _a1 *event.DeleteEventRequestV1) (*event.DeleteEventReplyV1, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *event.DeleteEventReplyV1
	if rf, ok := ret.Get(0).(func(context.Context, *event.DeleteEventRequestV1) *event.DeleteEventReplyV1); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.DeleteEventReplyV1)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *event.DeleteEventRequestV1) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsForDayV1 provides a mock function with given fields: _a0, _a1
func (_m *EventServiceServer) GetEventsForDayV1(_a0 context.Context, _a1 *event.GetEventsForDayRequestV1) (*event.EventsReplyV1, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *event.EventsReplyV1
	if rf, ok := ret.Get(0).(func(context.Context, *event.GetEventsForDayRequestV1) *event.EventsReplyV1); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.EventsReplyV1)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *event.GetEventsForDayRequestV1) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsForMonthV1 provides a mock function with given fields: _a0, _a1
func (_m *EventServiceServer) GetEventsForMonthV1(_a0 context.Context, _a1 *event.GetEventsForMonthRequestV1) (*event.EventsReplyV1, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *event.EventsReplyV1
	if rf, ok := ret.Get(0).(func(context.Context, *event.GetEventsForMonthRequestV1) *event.EventsReplyV1); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.EventsReplyV1)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *event.GetEventsForMonthRequestV1) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsForWeekV1 provides a mock function with given fields: _a0, _a1
func (_m *EventServiceServer) GetEventsForWeekV1(_a0 context.Context, _a1 *event.GetEventsForWeekRequestV1) (*event.EventsReplyV1, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *event.EventsReplyV1
	if rf, ok := ret.Get(0).(func(context.Context, *event.GetEventsForWeekRequestV1) *event.EventsReplyV1); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.EventsReplyV1)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *event.GetEventsForWeekRequestV1) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventV1 provides a mock function with given fields: _a0, _a1
func (_m *EventServiceServer) UpdateEventV1(_a0 context.Context, _a1 *event.UpdateEventRequestV1) (*event.EventReplyV1, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *event.EventReplyV1
	if rf, ok := ret.Get(0).(func(context.Context, *event.UpdateEventRequestV1) *event.EventReplyV1); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.EventReplyV1)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *event.UpdateEventRequestV1) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedEventServiceServer provides a mock function with given fields:
func (_m *EventServiceServer) mustEmbedUnimplementedEventServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewEventServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventServiceServer creates a new instance of EventServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventServiceServer(t mockConstructorTestingTNewEventServiceServer) *EventServiceServer {
	mock := &EventServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
